type AggregationResult {
  docCountErrorUpperBound: Int!
  field: String!
  sumOtherDocCount: Int!
  values: [BucketResult!]!
}

type Article {
  articleType: String!
  availability: String
  competenceGoals: [CompetenceGoal!]
  conceptIds: [Int!]
  concepts: [Concept!]
  content: String!
  copyright: Copyright!
  coreElements: [CoreElement!]
  created: String!
  crossSubjectTopics(subjectId: String): [CrossSubjectElement!]
  grepCodes: [String!]
  htmlIntroduction: String
  htmlTitle: String!
  id: Int!
  introduction: String
  language: String!
  metaDescription: String!
  metaImage: MetaImageWithCopyright
  oembed: String
  oldNdlaUrl: String
  published: String!
  relatedContent(subjectId: String): [RelatedContent!]
  requiredLibraries: [ArticleRequiredLibrary!]
  revision: Int!
  revisionDate: String
  slug: String
  supportedLanguages: [String!]
  tags: [String!]
  title: String!
  transformedContent(transformArgs: TransformedArticleContentInput): TransformedArticleContent!
  transformedDisclaimer(transformArgs: TransformedArticleContentInput): TransformedArticleContent!
  updated: String!
}

type ArticleFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ArticleMetaData {
  audios: [AudioLicense!]
  brightcoves: [BrightcoveLicense!]
  concepts: [ConceptLicense!]
  copyText: String
  footnotes: [FootNote!]
  glosses: [GlossLicense!]
  h5ps: [H5pLicense!]
  images: [ImageLicense!]
  podcasts: [PodcastLicense!]
  textblocks: [TextblockLicense!]
}

type ArticleRequiredLibrary {
  mediaType: String!
  name: String!
  url: String!
}

type ArticleSearchResult implements SearchResult {
  context: SearchContext
  contexts: [SearchContext!]!
  htmlTitle: String!
  id: String!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  traits: [String!]!
  url: String!
}

type Audio {
  audioFile: AudioFile!
  audioType: String!
  copyright: Copyright!
  created: String!
  id: Int!
  manuscript: Manuscript
  podcastMeta: PodcastMeta
  revision: Int!
  series: PodcastSeries
  supportedLanguages: [String!]!
  tags: Tags!
  title: Title!
  updated: String!
}

type AudioFile {
  fileSize: Int!
  language: String!
  mimeType: String!
  url: String!
}

type AudioFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type AudioLicense {
  copyText: String
  copyright: Copyright!
  id: String!
  src: String!
  title: String!
}

type AudioSearch {
  language: String!
  page: Int
  pageSize: Int!
  results: [AudioSummary!]!
  totalCount: Int!
}

type AudioSummary {
  audioType: String!
  id: Int!
  lastUpdated: String!
  license: String!
  manuscript: Manuscript
  podcastMeta: PodcastMeta
  supportedLanguages: [String!]!
  title: Title!
  url: String!
}

type Breadcrumb {
  id: String!
  name: String!
}

type BrightcoveCustomFields {
  accountId: String
  license: String!
  licenseInfo: [String!]!
}

type BrightcoveElement {
  account: String
  caption: String
  cover: String
  customFields: BrightcoveCustomFields
  description: String
  download: String
  iframe: BrightcoveIframe
  name: String
  player: String
  src: String
  uploadDate: String
  videoid: String
}

type BrightcoveIframe {
  height: Int!
  src: String!
  width: Int!
}

type BrightcoveLicense {
  copyright: Copyright
  cover: String
  description: String
  download: String
  id: String!
  iframe: BrightcoveIframe
  src: String
  title: String!
  uploadDate: String
}

type BucketResult {
  count: Int!
  value: String!
}

type Caption {
  caption: String!
  language: String!
}

type Category {
  id: String!
  isProgrammeSubject: Boolean!
  subjects: [Subject!]
  title: Title!
}

type CategoryBreadcrumb {
  id: Int!
  title: String!
}

type CompetenceGoal {
  code: String
  competenceGoalSet: Reference
  competenceGoalSetCode: String
  coreElements: [Element!]
  coreElementsCodes: [Element!]
  crossSubjectTopics: [Element!]
  crossSubjectTopicsCodes: [Element!]
  curriculum: Reference
  curriculumCode: String
  curriculumId: String
  id: String!
  language: String
  title: String!
  type: String!
}

type Concept {
  articleIds: [Int!]!
  articles: [Meta!]
  conceptType: String!
  content: String!
  copyright: ConceptCopyright
  created: String!
  glossData: Gloss
  id: Int!
  source: String
  subjectIds: [String!]
  subjectNames: [String!]
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
  visualElement: VisualElement
}

type ConceptCopyright {
  creators: [Contributor!]!
  license: License
  origin: String
  processed: Boolean
  processors: [Contributor!]!
  rightsholders: [Contributor!]!
}

type ConceptFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ConceptLicense {
  content: String
  copyright: ConceptCopyright
  id: String!
  src: String
  title: String!
}

type ConfigMetaBoolean {
  key: String!
  value: Boolean!
}

type ConfigMetaStringList {
  key: String!
  value: [String!]!
}

type Contributor {
  name: String!
  type: String!
}

input ContributorInput {
  name: String!
  type: String!
}

type Copyright {
  creators: [Contributor!]!
  license: License!
  origin: String
  processed: Boolean
  processors: [Contributor!]!
  rightsholders: [Contributor!]!
}

type CoreElement {
  curriculum: Reference
  curriculumCode: String
  description: String
  id: String!
  language: String
  title: String!
}

type CoverPhoto {
  altText: String!
  id: String!
  url: String!
}

type CrossSubjectElement {
  code: String
  path: String
  title: String!
  url: String
}

type Description {
  description: String!
  language: String!
}

type EditorNote {
  note: String!
  timestamp: String!
  updatedBy: String!
}

type Element {
  reference: Reference!
}

type EmbedVisualelement {
  visualElement: VisualElement
}

type Examples {
  example: String!
  language: String!
  transcriptions: Transcription!
}

type ExternalOpengraph {
  description: String
  imageAlt: String
  imageUrl: String
  title: String
  url: String
}

type FilmFrontpage {
  about: [FilmPageAbout!]!
  article: Article
  movieThemes: [MovieTheme!]!
  name: String!
  slideShow: [Movie!]!
}

type FilmPageAbout {
  description: String!
  language: String!
  title: String!
  visualElement: SubjectPageVisualElement!
}

type Folder {
  breadcrumbs: [Breadcrumb!]!
  created: String!
  description: String
  id: String!
  name: String!
  owner: Owner
  parentId: String
  resources: [FolderResource!]!
  status: String!
  subfolders: [Folder!]!
  updated: String!
}

type FolderResource {
  created: String!
  id: String!
  path: String!
  resourceId: String!
  resourceType: String!
  tags: [String!]!
}

interface FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

input FolderResourceMetaSearchInput {
  id: String!
  path: String!
  resourceType: String!
}

type FolderResourceResourceType {
  id: String!
  name: String!
}

type FootNote {
  authors: [String!]!
  edition: String
  publisher: String
  ref: Int!
  title: String!
  url: String
  year: String!
}

type FrontpageMenu {
  article: Article!
  articleId: Int!
  hideLevel: Boolean
  menu: [FrontpageMenu]
}

type Gloss {
  examples: [[Examples!]!]
  gloss: String!
  originalLanguage: String!
  transcriptions: Transcription!
  wordClass: String!
}

type GlossLicense {
  content: String
  copyright: ConceptCopyright
  id: String!
  metaImageUrl: String
  src: String
  title: String!
}

type Grade {
  categories: [Category!]
  id: String!
  title: Title!
  url: String
}

type GroupSearch {
  aggregations: [AggregationResult!]!
  language: String!
  page: Int
  pageSize: Int!
  resourceType: String!
  resources: [GroupSearchResult!]!
  suggestions: [SuggestionResult!]!
  totalCount: Int!
}

type GroupSearchResult {
  contexts: [SearchContext!]!
  htmlTitle: String!
  id: Int!
  ingress: String!
  metaImage: MetaImage
  name: String!
  path: String!
  title: String!
  traits: [String!]!
  url: String!
}

type H5pElement {
  src: String
  thumbnail: String
}

type H5pLicense {
  copyright: Copyright
  id: String!
  src: String
  thumbnail: String
  title: String!
}

type ImageAltText {
  alttext: String!
  language: String!
}

type ImageDimensions {
  height: Int!
  width: Int!
}

type ImageElement {
  alt: String
  altText: String!
  caption: String
  contentType: String
  copyText: String
  focalX: Float
  focalY: Float
  lowerRightX: Float
  lowerRightY: Float
  resourceid: String
  src: String!
  upperLeftX: Float
  upperLeftY: Float
}

type ImageFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ImageLicense {
  altText: String!
  contentType: String
  copyText: String
  copyright: Copyright!
  id: String!
  src: String!
  title: String!
}

type ImageMetaInformation {
  altText: String!
  caption: String!
  contentType: String!
  copyright: Copyright!
  created: String!
  createdBy: String!
  id: String!
  imageUrl: String!
  metaUrl: String!
  size: Int!
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
}

type ImageMetaInformationV2 {
  alttext: ImageAltText!
  caption: Caption!
  contentType: String!
  copyright: Copyright!
  created: String!
  createdBy: String!
  editorNotes: [EditorNote!]
  id: String!
  imageDimensions: ImageDimensions
  imageUrl: String!
  metaUrl: String!
  modelRelease: String!
  size: Int!
  supportedLanguages: [String!]
  tags: Tags!
  title: Title!
}

type ImageMetaInformationV3 {
  alttext: ImageAltText!
  caption: Caption!
  copyright: Copyright!
  created: String!
  createdBy: String!
  editorNotes: [EditorNote!]
  id: String!
  image: ImageV3!
  metaUrl: String!
  modelRelease: String!
  supportedLanguages: [String!]!
  tags: Tags!
  title: Title!
}

type ImageSearch {
  language: String!
  page: Int!
  pageSize: Int!
  results: [ImageMetaInformationV3!]!
  totalCount: Int!
}

type ImageV3 {
  contentType: String!
  dimensions: ImageDimensions
  fileName: String!
  imageUrl: String!
  language: String!
  size: Int!
}

type Learningpath {
  canEdit: Boolean!
  copyright: LearningpathCopyright!
  coverphoto: LearningpathCoverphoto
  created: String!
  description: String!
  duration: Int
  id: Int!
  isBasedOn: Int
  isMyNDLAOwner: Boolean!
  lastUpdated: String!
  learningstepUrl: String!
  learningsteps: [LearningpathStep!]!
  madeAvailable: String
  metaUrl: String!
  revision: Int!
  status: String!
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
  verificationStatus: String!
}

input LearningpathCopyInput {
  copyright: LearningpathCopyrightInput
  coverPhotoMetaUrl: String
  description: String
  duration: Int
  language: String!
  tags: [String!]
  title: String!
}

type LearningpathCopyright {
  contributors: [Contributor!]!
  license: License!
}

input LearningpathCopyrightInput {
  contributors: [ContributorInput!]!
  license: LicenseInput!
}

type LearningpathCoverphoto {
  metaUrl: String!
  url: String!
}

input LearningpathEmbedInput {
  embedType: String!
  url: String!
}

type LearningpathFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

input LearningpathNewInput {
  copyright: LearningpathCopyrightInput!
  coverPhotoMetaUrl: String
  description: String
  duration: Int
  introduction: String
  language: String!
  tags: [String!]
  title: String!
}

type LearningpathSearchResult implements SearchResult {
  context: SearchContext
  contexts: [SearchContext!]!
  htmlTitle: String!
  id: String!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  traits: [String!]!
  url: String!
}

type LearningpathSeqNo {
  seqNo: Int!
}

type LearningpathStep {
  description: String
  embedUrl: LearningpathStepEmbedUrl
  id: Int!
  introduction: String
  license: License
  metaUrl: String!
  oembed: LearningpathStepOembed
  opengraph: ExternalOpengraph
  resource(parentId: String, rootId: String): Resource
  revision: Int!
  seqNo: Int!
  showTitle: Boolean!
  status: String!
  supportedLanguages: [String!]!
  title: String!
  type: String!
}

type LearningpathStepEmbedUrl {
  embedType: String!
  url: String!
}

input LearningpathStepNewInput {
  description: String
  embedUrl: LearningpathEmbedInput
  introduction: String
  language: String!
  license: String
  showTitle: Boolean!
  title: String!
  type: String!
}

type LearningpathStepOembed {
  height: Int!
  html: String!
  type: String!
  version: String!
  width: Int!
}

input LearningpathStepUpdateInput {
  description: String
  embedUrl: LearningpathEmbedInput
  introduction: String
  language: String!
  license: String
  revision: Int!
  showTitle: Boolean
  title: String
  type: String
}

input LearningpathUpdateInput {
  copyright: LearningpathCopyrightInput
  coverPhotoMetaUrl: String
  deleteMessage: Boolean
  description: String
  duration: Int
  language: String!
  revision: Int!
  tags: [String!]
  title: String
}

type License {
  description: String
  license: String!
  url: String
}

input LicenseInput {
  description: String
  license: String!
  url: String
}

type Manuscript {
  language: String!
  manuscript: String!
}

type Meta {
  availability: String
  htmlIntroduction: String
  htmlTitle: String!
  id: Int!
  introduction: String
  language: String
  lastUpdated: String
  metaDescription: String
  metaImage: MetaImage
  title: String!
}

type MetaImage {
  alt: String!
  url: String!
}

type MetaImageWithCopyright {
  alt: String!
  copyright: Copyright!
  url: String!
}

type Movie {
  id: String!
  metaDescription: String!
  metaImage: MetaImage
  resourceTypes: [ResourceType!]!
  title: String!
  url: String!
}

type MovieMeta {
  metaDescription: String
  metaImage: MetaImage
  title: String!
}

type MovieResourceTypes {
  resourceTypes: [ResourceType!]
}

type MovieTheme {
  movies: [Movie!]!
  name: [Name!]!
}

type Mutation {
  addFolder(description: String, name: String!, parentId: String, status: String): Folder!
  addFolderResource(
    folderId: String!
    path: String!
    resourceId: String!
    resourceType: String!
    tags: [String!]
  ): FolderResource!
  copyLearningpath(learningpathId: Int!, params: LearningpathCopyInput!): MyNdlaLearningpath!
  copySharedFolder(destinationFolderId: String, folderId: String!): Folder!
  deleteFolder(id: String!): String!
  deleteFolderResource(folderId: String!, resourceId: String!): String!
  deleteLearningpath(id: Int!): Boolean
  deleteLearningpathStep(learningpathId: Int!, learningstepId: Int!): [String!]
  deletePersonalData: Boolean!
  favoriteSharedFolder(folderId: String!): String!
  newLearningpath(params: LearningpathNewInput!): MyNdlaLearningpath!
  newLearningpathStep(learningpathId: Int!, params: LearningpathStepNewInput!): MyNdlaLearningpathStep!
  sortFolders(parentId: String, sortedIds: [String!]!): SortResult!
  sortResources(parentId: String!, sortedIds: [String!]!): SortResult!
  sortSavedSharedFolders(sortedIds: [String!]!): SortResult!
  transformArticleContent(
    absoluteUrl: Boolean
    content: String!
    draftConcept: Boolean
    prettyUrl: Boolean
    previewH5p: Boolean
    subject: String
    visualElement: String
  ): String!
  unFavoriteSharedFolder(folderId: String!): String!
  updateFolder(description: String, id: String!, name: String, status: String): Folder!
  updateFolderResource(id: String!, tags: [String!]): FolderResource!
  updateFolderStatus(folderId: String!, status: String!): [String!]!
  updateLearningpath(learningpathId: Int!, params: LearningpathUpdateInput!): MyNdlaLearningpath!
  updateLearningpathStatus(id: Int!, status: String!): MyNdlaLearningpath!
  updateLearningpathStep(
    learningpathId: Int!
    learningstepId: Int!
    params: LearningpathStepUpdateInput!
  ): MyNdlaLearningpathStep!
  updateLearningpathStepSeqNo(learningpathId: Int!, learningpathStepId: Int!, seqNo: Int!): LearningpathSeqNo!
  updatePersonalData(
    arenaAccepted: Boolean
    favoriteSubjects: [String]
    shareNameAccepted: Boolean
  ): MyNdlaPersonalData!
}

type MyNdlaGroup {
  displayName: String!
  id: String!
  isPrimarySchool: Boolean!
  parentId: String
}

type MyNdlaLearningpath {
  canEdit: Boolean!
  copyright: LearningpathCopyright!
  coverphoto: LearningpathCoverphoto
  created: String!
  description: String!
  duration: Int
  id: Int!
  isBasedOn: Int
  isMyNDLAOwner: Boolean!
  lastUpdated: String!
  learningstepUrl: String!
  learningsteps: [MyNdlaLearningpathStep!]!
  madeAvailable: String
  metaUrl: String!
  revision: Int!
  status: String!
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
  verificationStatus: String!
}

type MyNdlaLearningpathStep {
  description: String
  embedUrl: LearningpathStepEmbedUrl
  id: Int!
  introduction: String
  license: License
  metaUrl: String!
  oembed: LearningpathStepOembed
  opengraph: ExternalOpengraph
  resource(parentId: String, rootId: String): Resource
  revision: Int!
  seqNo: Int!
  showTitle: Boolean!
  status: String!
  supportedLanguages: [String!]!
  title: String!
  type: String!
}

type MyNdlaPersonalData {
  arenaAccepted: Boolean!
  arenaEnabled: Boolean!
  displayName: String!
  email: String!
  favoriteSubjects: [String!]!
  feideId: String!
  groups: [MyNdlaGroup!]!
  id: Int!
  organization: String!
  role: UserRole!
  shareNameAccepted: Boolean!
  username: String!
}

type Name {
  language: String!
  name: String!
}

type NewFolder {
  name: String!
  parentId: String
  status: String
}

type NewFolderResource {
  path: String!
  resourceType: String!
  tags: [String!]
}

type Node implements TaxBase & TaxonomyEntity & WithArticle {
  alternateNodes: [Node!]
  article: Article
  availability: String
  breadcrumbs: [String!]!
  children(nodeType: String, recursive: Boolean): [Node!]
  connectionId: String
  contentUri: String
  context: TaxonomyContext
  contextId: String
  contexts: [TaxonomyContext!]!
  grepCodes: [String!]
  id: String!
  language: String
  learningpath: Learningpath
  meta: Meta
  metadata: TaxonomyMetadata!
  name: String!
  nodeType: String!
  parentId: String
  rank: Int
  relevanceId: String
  resourceTypes: [ResourceType!]
  subjectpage: SubjectPage
  supportedLanguages: [String!]!
  url: String
}

type NodeSearchResult implements SearchResult {
  context: SearchContext
  contexts: [SearchContext!]!
  htmlTitle: String!
  id: String!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  url: String!
}

type Owner {
  name: String!
}

type PodcastLicense {
  copyText: String
  copyright: Copyright!
  coverPhotoUrl: String
  description: String
  id: String!
  src: String!
  title: String!
}

type PodcastMeta {
  image: ImageMetaInformation
  introduction: String!
  language: String!
}

type PodcastSeries implements PodcastSeriesBase {
  coverPhoto: CoverPhoto!
  description: Description!
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

interface PodcastSeriesBase {
  coverPhoto: CoverPhoto!
  description: Description!
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

type PodcastSeriesSearch {
  language: String!
  page: Int
  pageSize: Int!
  results: [PodcastSeriesSummary!]!
  totalCount: Int!
}

type PodcastSeriesSummary {
  coverPhoto: CoverPhoto!
  description: Description!
  episodes: [AudioSummary!]
  id: Int!
  supportedLanguages: [String!]
  title: Title!
}

type PodcastSeriesWithEpisodes implements PodcastSeriesBase {
  content: ResourceEmbed
  coverPhoto: CoverPhoto!
  description: Description!
  episodes: [Audio!]
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

type ProgrammePage {
  contentUri: String
  contextId: String
  desktopImage: MetaImage
  grades: [Grade!]
  id: String!
  metaDescription: String
  mobileImage: MetaImage
  title: Title!
  url: String
}

type Query {
  aiEnabledOrgs: ConfigMetaStringList
  alerts: [UptimeAlert]
  allFolderResources(size: Int): [FolderResource!]!
  arenaEnabledOrgs: ConfigMetaStringList
  article(id: String!): Article
  articleResource(articleId: String, taxonomyId: String): Resource
  audio(id: Int!): Audio
  competenceGoal(code: String!, language: String): CompetenceGoal
  competenceGoals(codes: [String], language: String): [CompetenceGoal!]
  coreElement(code: String!, language: String): CoreElement
  coreElements(codes: [String], language: String): [CoreElement!]
  examLockStatus: ConfigMetaBoolean!
  filmfrontpage: FilmFrontpage
  folder(id: String!, includeResources: Boolean, includeSubfolders: Boolean): Folder!
  folderResourceMeta(resource: FolderResourceMetaSearchInput!): FolderResourceMeta
  folderResourceMetaSearch(resources: [FolderResourceMetaSearchInput!]!): [FolderResourceMeta!]!
  folders(includeResources: Boolean, includeSubfolders: Boolean): UserFolder!
  frontpage: FrontpageMenu
  groupSearch(
    aggregatePaths: [String!]
    contextTypes: String
    fallback: String
    filterInactive: Boolean
    grepCodes: String
    language: String
    levels: String
    license: String
    page: Int
    pageSize: Int
    query: String
    resourceTypes: String
    subjects: String
  ): [GroupSearch!]
  image(id: String!): ImageMetaInformationV2
  imageSearch(license: String, page: Int, pageSize: Int, query: String): ImageSearch!
  imageV3(id: String!): ImageMetaInformationV3
  learningpath(pathId: String!): Learningpath
  learningpathStepOembed(url: String!): LearningpathStepOembed!
  myLearningpaths: [MyNdlaLearningpath!]
  myNdlaLearningpath(pathId: String!): MyNdlaLearningpath
  node(contextId: String, id: String, parentId: String, rootId: String): Node
  nodeByArticleId(articleId: String, nodeId: String): Node
  nodes(
    contentUri: String
    filterVisible: Boolean
    ids: [String!]
    metadataFilterKey: String
    metadataFilterValue: String
    nodeType: String
  ): [Node!]
  opengraph(url: String!): ExternalOpengraph
  personalData: MyNdlaPersonalData
  podcastSearch(fallback: Boolean, page: Int!, pageSize: Int!): AudioSearch
  podcastSeries(id: Int!): PodcastSeriesWithEpisodes
  podcastSeriesSearch(fallback: Boolean, page: Int!, pageSize: Int!): PodcastSeriesSearch
  programme(contextId: String, path: String): ProgrammePage
  programmes: [ProgrammePage!]
  resource(id: String!, subjectId: String, topicId: String): Resource
  resourceEmbed(id: String!, type: String!): ResourceEmbed!
  resourceEmbeds(resources: [ResourceEmbedInput!]!): ResourceEmbed!
  resourceTypes: [ResourceTypeDefinition!]
  search(
    aggregatePaths: [String!]
    contextTypes: String
    fallback: String
    filterInactive: Boolean
    grepCodes: String
    ids: [Int!]
    language: String
    languageFilter: String
    levels: String
    license: String
    nodeTypes: String
    page: Int
    pageSize: Int
    query: String
    relevance: String
    resourceTypes: String
    resultTypes: String
    sort: String
    subjects: String
    traits: [String!]
  ): Search
  searchWithoutPagination(
    contextTypes: String
    fallback: String
    ids: [Int!]
    language: String
    languageFilter: String
    levels: String
    license: String
    query: String
    relevance: String
    resourceTypes: String
    sort: String
    subjects: String
  ): SearchWithoutPagination
  sharedFolder(id: String!): SharedFolder!
  subject(id: String!): Subject
  subjectCollection(language: String!): [Subject!]
  subjectpage(id: Int!): SubjectPage
  subjects(filterVisible: Boolean, ids: [String!], metadataFilterKey: String, metadataFilterValue: String): [Subject!]
  topic(id: String!, subjectId: String): Topic
  topics(contentUri: String!, filterVisible: Boolean): [Topic!]
}

type Reference {
  code: String
  id: String!
  title: String!
}

type RelatedContent {
  title: String!
  url: String!
}

type Resource implements TaxBase & TaxonomyEntity & WithArticle {
  article: Article
  availability: String
  breadcrumbs: [String!]!
  contentUri: String
  context: TaxonomyContext
  contextId: String
  contexts: [TaxonomyContext!]!
  id: String!
  language: String
  learningpath: Learningpath
  meta: Meta
  metadata: TaxonomyMetadata!
  name: String!
  nodeType: String!
  parents: [Topic!]
  rank: Int
  relevanceId: String
  resourceTypes: [ResourceType!]
  supportedLanguages: [String!]!
  url: String
}

type ResourceEmbed {
  content: String!
  meta: ResourceMetaData!
}

input ResourceEmbedInput {
  conceptType: String
  id: String!
  type: String!
}

type ResourceMetaData {
  audios: [AudioLicense!]
  brightcoves: [BrightcoveLicense!]
  concepts: [ConceptLicense!]
  glosses: [GlossLicense!]
  h5ps: [H5pLicense!]
  images: [ImageLicense!]
  podcasts: [PodcastLicense!]
}

type ResourceType {
  id: String!
  name: String!
}

type ResourceTypeDefinition {
  id: String!
  name: String!
  subtypes: [ResourceTypeDefinition!]
}

type Search {
  aggregations: [AggregationResult!]!
  language: String!
  page: Int
  pageSize: Int!
  results: [SearchResult!]!
  suggestions: [SuggestionResult!]!
  totalCount: Int!
}

type SearchContext {
  breadcrumbs: [String!]!
  contextId: String!
  contextType: String!
  isActive: Boolean!
  isPrimary: Boolean!
  language: String!
  path: String!
  publicId: String!
  relevance: String!
  relevanceId: String!
  resourceTypes: [SearchContextResourceTypes!]!
  root: String!
  rootId: String!
  url: String!
}

type SearchContextResourceTypes {
  id: String!
  language: String!
  name: String!
}

interface SearchResult {
  context: SearchContext
  contexts: [SearchContext!]!
  id: String!
  metaDescription: String!
  supportedLanguages: [String!]!
  title: String!
  url: String!
}

union SearchResultUnion = ArticleSearchResult | LearningpathSearchResult | NodeSearchResult

type SearchSuggestion {
  length: Int!
  offset: Int!
  options: [SuggestOption!]!
  text: String!
}

type SearchWithoutPagination {
  results: [SearchResult!]!
}

type SharedFolder {
  breadcrumbs: [Breadcrumb!]!
  created: String!
  description: String
  id: String!
  name: String!
  owner: Owner
  parentId: String
  resources: [FolderResource!]!
  status: String!
  subfolders: [SharedFolder!]!
  updated: String!
}

type SortResult {
  parentId: String
  sortedIds: [String!]!
}

scalar StringRecord

type Subject implements TaxBase & TaxonomyEntity {
  allTopics: [Topic!]
  breadcrumbs: [String!]!
  contentUri: String
  context: TaxonomyContext
  contextId: String
  contexts: [TaxonomyContext!]!
  grepCodes: [String!]
  id: String!
  language: String
  metadata: TaxonomyMetadata!
  name: String!
  nodeType: String!
  relevanceId: String
  resourceTypes: [ResourceType!]
  subjectpage: SubjectPage
  supportedLanguages: [String!]!
  topics(all: Boolean): [Topic!]
  url: String
}

type SubjectLink {
  name: String
  path: String
  url: String
}

type SubjectPage {
  about: SubjectPageAbout
  banner: SubjectPageBanner!
  buildsOn: [SubjectLink]!
  connectedTo: [SubjectLink]!
  id: Int!
  leadsTo: [SubjectLink]!
  metaDescription: String
  name: String!
  supportedLanguages: [String!]!
}

type SubjectPageAbout {
  description: String!
  title: String!
  visualElement: SubjectPageVisualElement!
}

type SubjectPageBanner {
  desktopId: String!
  desktopUrl: String!
  mobileId: String
  mobileUrl: String
}

type SubjectPageVisualElement {
  alt: String
  imageLicense: ImageLicense
  imageUrl: String
  type: String!
  url: String!
}

type SuggestOption {
  score: Float!
  text: String!
}

type SuggestionResult {
  name: String!
  suggestions: [SearchSuggestion!]!
}

type Tags {
  language: String!
  tags: [String!]!
}

interface TaxBase {
  id: String!
  name: String!
  url: String
}

type TaxonomyContext {
  breadcrumbs: [String!]!
  contextId: String!
  isActive: Boolean!
  name: String!
  parentIds: [String!]!
  parents: [TaxonomyCrumb!]
  relevance: String!
  root: String!
  rootId: String!
  url: String!
}

type TaxonomyCrumb implements TaxBase {
  contextId: String!
  id: String!
  name: String!
  url: String!
}

interface TaxonomyEntity {
  breadcrumbs: [String!]!
  contentUri: String
  context: TaxonomyContext
  contextId: String
  contexts: [TaxonomyContext!]!
  id: String!
  language: String
  metadata: TaxonomyMetadata!
  name: String!
  nodeType: String!
  relevanceId: String
  resourceTypes: [ResourceType!]
  supportedLanguages: [String!]!
  url: String
}

type TaxonomyMetadata {
  customFields: StringRecord!
  grepCodes: [String!]!
  visible: Boolean!
}

type TextblockLicense {
  copyright: Copyright!
  title: String
}

type Title {
  language: String!
  title: String!
}

type Topic implements TaxBase & TaxonomyEntity & WithArticle {
  alternateTopics: [Topic!]
  article: Article
  availability: String
  breadcrumbs: [String!]!
  contentUri: String
  context: TaxonomyContext
  contextId: String
  contexts: [TaxonomyContext!]!
  coreResources(subjectId: String): [Resource!]
  id: String!
  isPrimary: Boolean
  language: String
  meta: Meta
  metadata: TaxonomyMetadata!
  name: String!
  nodeType: String!
  parentId: String
  relevanceId: String
  resourceTypes: [ResourceType!]
  subtopics: [Topic!]
  supplementaryResources(subjectId: String): [Resource!]
  supportedLanguages: [String!]!
  url: String
}

type Transcription {
  pinyin: String
  traditional: String
}

type TransformedArticleContent {
  content: String!
  metaData: ArticleMetaData
  visualElement: VisualElement
  visualElementEmbed: ResourceEmbed
}

input TransformedArticleContentInput {
  absoluteUrl: Boolean
  contextId: String
  draftConcept: Boolean
  isOembed: String
  path: String
  prettyUrl: Boolean
  previewH5p: Boolean
  showVisualElement: String
  subjectId: String
}

type UpdatedFolder {
  name: String
  status: String
}

type UpdatedFolderResource {
  tags: [String!]
}

type UptimeAlert {
  body: String
  closable: Boolean!
  number: Int!
  title: String!
}

type UserFolder {
  folders: [Folder!]!
  sharedFolders: [SharedFolder!]!
}

enum UserRole {
  employee
  student
}

type VideoFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type VisualElement {
  brightcove: BrightcoveElement
  copyright: Copyright
  embed: String
  h5p: H5pElement
  image: ImageElement
  language: String
  oembed: VisualElementOembed
  resource: String
  title: String
  url: String
}

type VisualElementOembed {
  fullscreen: Boolean
  html: String
  title: String
}

interface WithArticle {
  article: Article
  availability: String
  contentUri: String
  meta: Meta
}
