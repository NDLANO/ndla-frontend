type AggregationResult {
  docCountErrorUpperBound: Int!
  field: String!
  sumOtherDocCount: Int!
  values: [BucketResult!]!
}

type ArenaBreadcrumb {
  id: Int!
  name: String!
  type: String!
}

type ArenaCategory {
  description: String!
  disabled: Boolean!
  htmlDescription: String!
  id: Int!
  name: String!
  postCount: Int!
  slug: String!
  topicCount: Int!
  topics: [ArenaTopic!]
}

type ArenaNotification {
  bodyShort: String!
  datetimeISO: String!
  from: Int!
  image: String
  importance: Int!
  notificationId: String!
  path: String!
  postId: Int!
  read: Boolean!
  readClass: String!
  subject: String!
  topicId: Int!
  topicTitle: String!
  type: String!
  user: ArenaNotificationUser!
}

type ArenaNotificationUser implements BaseUser {
  displayName: String!
  id: Int!
  profilePicture: String
  slug: String!
  username: String!
}

type ArenaPost {
  content: String!
  id: Int!
  isMainPost: Boolean!
  timestamp: String!
  topicId: Int!
  user: ArenaUser!
}

type ArenaTopic {
  breadcrumbs: [ArenaBreadcrumb!]!
  categoryId: Int!
  id: Int!
  locked: Boolean!
  postCount: Int!
  posts: [ArenaPost!]!
  slug: String!
  timestamp: String!
  title: String!
}

type ArenaUser implements BaseUser {
  displayName: String!
  groupTitleArray: [String!]!
  id: Int!
  profilePicture: String
  slug: String!
  username: String!
}

type Article {
  articleType: String!
  availability: String
  competenceGoals: [CompetenceGoal!]
  conceptIds: [Int!]
  concepts: [Concept!]
  content: String!
  copyright: Copyright!
  coreElements: [CoreElement!]
  created: String!
  crossSubjectTopics(subjectId: String): [CrossSubjectElement!]
  grepCodes: [String!]
  id: Int!
  introduction: String
  language: String!
  metaData: ArticleMetaData
  metaDescription: String!
  metaImage: MetaImage
  oembed: String
  oldNdlaUrl: String
  published: String!
  relatedContent: [RelatedContent!]
  requiredLibraries: [ArticleRequiredLibrary!]
  revision: Int!
  revisionDate: String
  slug: String
  supportedLanguages: [String!]
  tags: [String!]
  title: String!
  updated: String!
  visualElement: VisualElement
  visualElementEmbed: ResourceEmbed
}

type ArticleFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ArticleMetaData {
  audios: [AudioLicense!]
  brightcoves: [BrightcoveLicense!]
  concepts: [ConceptLicense!]
  copyText: String
  footnotes: [FootNote!]
  glosses: [GlossLicense!]
  h5ps: [H5pLicense!]
  images: [ImageLicense!]
  podcasts: [PodcastLicense!]
}

type ArticleRequiredLibrary {
  mediaType: String!
  name: String!
  url: String!
}

type ArticleSearchResult implements SearchResult {
  contexts: [SearchContext!]!
  id: Int!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  traits: [String!]!
  url: String!
}

type Audio {
  audioFile: AudioFile!
  audioType: String!
  copyright: Copyright!
  created: String!
  id: Int!
  manuscript: Manuscript
  podcastMeta: PodcastMeta
  revision: Int!
  series: PodcastSeries
  supportedLanguages: [String!]!
  tags: Tags!
  title: Title!
  updated: String!
}

type AudioFile {
  fileSize: Int!
  language: String!
  mimeType: String!
  url: String!
}

type AudioFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type AudioLicense {
  copyText: String
  copyright: Copyright!
  id: String!
  src: String!
  title: String!
}

type AudioSearch {
  language: String!
  page: Int
  pageSize: Int!
  results: [AudioSummary!]!
  totalCount: Int!
}

type AudioSummary {
  audioType: String!
  id: Int!
  lastUpdated: String!
  license: String!
  manuscript: Manuscript
  podcastMeta: PodcastMeta
  supportedLanguages: [String!]!
  title: Title!
  url: String!
}

interface BaseUser {
  displayName: String!
  id: Int!
  profilePicture: String
  slug: String!
  username: String!
}

type Breadcrumb {
  id: String!
  name: String!
}

type BrightcoveCustomFields {
  accountId: String
  license: String!
  licenseInfo: [String!]!
}

type BrightcoveElement {
  account: String
  caption: String
  cover: String
  customFields: BrightcoveCustomFields
  description: String
  download: String
  iframe: BrightcoveIframe
  name: String
  player: String
  src: String
  uploadDate: String
  videoid: String
}

type BrightcoveIframe {
  height: Int!
  src: String!
  width: Int!
}

type BrightcoveLicense {
  copyright: Copyright
  cover: String
  description: String
  download: String
  id: String!
  iframe: BrightcoveIframe
  src: String
  title: String!
  uploadDate: String
}

type BucketResult {
  count: Int!
  value: String!
}

type Caption {
  caption: String!
  language: String!
}

type Category {
  id: String!
  isProgrammeSubject: Boolean!
  subjects: [Subject!]
  title: Title!
}

type CompetenceGoal {
  code: String
  competenceGoalSet: Reference
  competenceGoalSetCode: String
  coreElements: [Element!]
  coreElementsCodes: [Element!]
  crossSubjectTopics: [Element!]
  crossSubjectTopicsCodes: [Element!]
  curriculum: Reference
  curriculumCode: String
  curriculumId: String
  id: String!
  language: String
  title: String!
  type: String!
}

type Concept {
  articleIds: [Int!]!
  articles: [Meta!]
  conceptType: String!
  content: String!
  copyright: ConceptCopyright
  created: String!
  glossData: Gloss
  id: Int!
  image: ImageLicense
  metaImage: MetaImage
  source: String
  subjectIds: [String!]
  subjectNames: [String!]
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
  visualElement: VisualElement
}

type ConceptCopyright {
  creators: [Contributor!]!
  license: License
  origin: String
  processed: Boolean
  processors: [Contributor!]!
  rightsholders: [Contributor!]!
}

type ConceptFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ConceptLicense {
  content: String
  copyright: ConceptCopyright
  id: String!
  metaImageUrl: String
  src: String
  title: String!
}

type ConceptResult {
  concepts: [Concept!]!
  language: String!
  page: Int
  pageSize: Int!
  totalCount: Int!
}

type ConfigMetaBoolean {
  key: String!
  value: Boolean!
}

type ConfigMetaStringList {
  key: String!
  value: [String!]!
}

type Contributor {
  name: String!
  type: String!
}

type Copyright {
  creators: [Contributor!]!
  license: License!
  origin: String
  processed: Boolean
  processors: [Contributor!]!
  rightsholders: [Contributor!]!
}

type CoreElement {
  curriculum: Reference
  curriculumCode: String
  description: String
  id: String!
  language: String
  title: String!
}

type CoverPhoto {
  altText: String!
  id: String!
  url: String!
}

type CrossSubjectElement {
  code: String
  path: String
  title: String!
}

type Description {
  description: String!
  language: String!
}

type EditorNote {
  note: String!
  timestamp: String!
  updatedBy: String!
}

type Element {
  explanation: [String]!
  reference: Reference!
}

type EmbedVisualelement {
  visualElement: VisualElement
}

type Examples {
  example: String!
  language: String!
  transcriptions: Transcription!
}

type FilmFrontpage {
  about: [FilmPageAbout!]!
  movieThemes: [MovieTheme!]!
  name: String!
  slideShow: [Movie!]!
}

type FilmPageAbout {
  description: String!
  language: String!
  title: String!
  visualElement: SubjectPageVisualElement!
}

type Folder {
  breadcrumbs: [Breadcrumb!]!
  created: String!
  description: String
  id: String!
  name: String!
  parentId: String
  resources: [FolderResource!]!
  status: String!
  subfolders: [Folder!]!
  updated: String!
}

type FolderResource {
  created: String!
  id: String!
  path: String!
  resourceId: String!
  resourceType: String!
  tags: [String!]!
}

interface FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

input FolderResourceMetaSearchInput {
  id: String!
  path: String!
  resourceType: String!
}

type FolderResourceResourceType {
  id: String!
  name: String!
}

type FootNote {
  authors: [String!]!
  edition: String
  publisher: String
  ref: Int!
  title: String!
  url: String
  year: String!
}

type FrontPageResources {
  results: [FrontpageSearchResult!]!
  suggestions: [SuggestionResult!]!
  totalCount: Int!
}

type FrontpageMenu {
  article: Article!
  articleId: Int!
  menu: [FrontpageMenu]
}

type FrontpageSearch {
  learningResources: FrontPageResources!
  topicResources: FrontPageResources!
}

type FrontpageSearchResult {
  id: String!
  name: String!
  path: String!
  resourceTypes: [SearchContextResourceTypes!]!
  subject: String!
}

type Gloss {
  examples: [[Examples!]!]
  gloss: String!
  originalLanguage: String!
  transcriptions: Transcription!
  wordClass: String!
}

type GlossLicense {
  content: String
  copyright: ConceptCopyright
  id: String!
  metaImageUrl: String
  src: String
  title: String!
}

type Grade {
  categories: [Category!]
  id: String!
  title: Title!
  url: String!
}

type GroupSearch {
  aggregations: [AggregationResult!]!
  language: String!
  page: Int
  pageSize: Int!
  resourceType: String!
  resources: [GroupSearchResult!]!
  suggestions: [SuggestionResult!]!
  totalCount: Int!
}

type GroupSearchResult {
  contexts: [SearchContext!]!
  id: Int!
  ingress: String!
  metaImage: MetaImage
  name: String!
  path: String!
  traits: [String!]!
  url: String!
}

type H5pElement {
  src: String
  thumbnail: String
}

type H5pLicense {
  copyright: Copyright
  id: String!
  src: String
  thumbnail: String
  title: String!
}

type ImageAltText {
  alttext: String!
  language: String!
}

type ImageDimensions {
  height: Int!
  width: Int!
}

type ImageElement {
  alt: String
  altText: String!
  caption: String
  contentType: String
  copyText: String
  focalX: Float
  focalY: Float
  lowerRightX: Float
  lowerRightY: Float
  resourceid: String
  src: String!
  upperLeftX: Float
  upperLeftY: Float
}

type ImageFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type ImageLicense {
  altText: String!
  contentType: String
  copyText: String
  copyright: Copyright!
  id: String!
  src: String!
  title: String!
}

type ImageMetaInformation {
  altText: String!
  caption: String!
  contentType: String!
  copyright: Copyright!
  created: String!
  createdBy: String!
  id: String!
  imageUrl: String!
  metaUrl: String!
  size: Int!
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
}

type ImageMetaInformationV2 {
  alttext: ImageAltText!
  caption: Caption!
  contentType: String!
  copyright: Copyright!
  created: String!
  createdBy: String!
  editorNotes: [EditorNote!]
  id: String!
  imageDimensions: ImageDimensions
  imageUrl: String!
  metaUrl: String!
  modelRelease: String!
  size: Int!
  supportedLanguages: [String!]
  tags: Tags!
  title: Title!
}

type Learningpath {
  canEdit: Boolean!
  copyright: LearningpathCopyright!
  coverphoto: LearningpathCoverphoto
  description: String!
  duration: Int
  id: Int!
  isBasedOn: Int
  lastUpdated: String!
  learningstepUrl: String!
  learningsteps: [LearningpathStep!]!
  metaUrl: String!
  revision: Int!
  status: String!
  supportedLanguages: [String!]!
  tags: [String!]!
  title: String!
  verificationStatus: String!
}

type LearningpathCopyright {
  contributors: [Contributor!]!
  license: License!
}

type LearningpathCoverphoto {
  metaUrl: String!
  url: String!
}

type LearningpathFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type LearningpathSearchResult implements SearchResult {
  contexts: [SearchContext!]!
  id: Int!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  traits: [String!]!
  url: String!
}

type LearningpathStep {
  article: Article
  description: String
  embedUrl: LearningpathStepEmbedUrl
  id: Int!
  license: License
  metaUrl: String!
  oembed: LearningpathStepOembed
  resource: Resource
  revision: Int!
  seqNo: Int!
  showTitle: Boolean!
  status: String!
  supportedLanguages: [String!]!
  title: String!
  type: String!
}

type LearningpathStepEmbedUrl {
  embedType: String!
  url: String!
}

type LearningpathStepOembed {
  height: Int!
  html: String!
  type: String!
  version: String!
  width: Int!
}

type License {
  description: String
  license: String!
  url: String
}

type ListingPage {
  subjects: [Subject!]
  tags: [String!]
}

type Manuscript {
  language: String!
  manuscript: String!
}

type Meta {
  availability: String
  id: Int!
  introduction: String
  language: String
  lastUpdated: String
  metaDescription: String
  metaImage: MetaImage
  title: String!
}

type MetaImage {
  alt: String!
  url: String!
}

type Movie {
  id: String!
  metaDescription: String!
  metaImage: MetaImage
  path: String!
  resourceTypes: [ResourceType!]!
  title: String!
}

type MovieMeta {
  metaDescription: String
  metaImage: MetaImage
  title: String!
}

type MoviePath {
  path: String
  paths: [String!]
}

type MovieResourceTypes {
  resourceTypes: [ResourceType!]
}

type MovieTheme {
  movies: [Movie!]!
  name: [Name!]!
}

type Mutation {
  addFolder(
    description: String
    name: String!
    parentId: String
    status: String
  ): Folder!
  addFolderResource(
    folderId: String!
    path: String!
    resourceId: String!
    resourceType: String!
    tags: [String!]
  ): FolderResource!
  copySharedFolder(destinationFolderId: String, folderId: String!): Folder!
  deleteFolder(id: String!): String!
  deleteFolderResource(folderId: String!, resourceId: String!): String!
  deletePersonalData: Boolean!
  markNotificationAsRead(topicIds: [Int!]!): [Int!]!
  newArenaTopic(categoryId: Int!, content: String!, title: String!): ArenaTopic!
  replyToTopic(content: String!, topicId: Int!): ArenaPost!
  sortFolders(parentId: String, sortedIds: [String!]!): SortResult!
  sortResources(parentId: String!, sortedIds: [String!]!): SortResult!
  transformArticleContent(
    absoluteUrl: Boolean
    content: String!
    draftConcept: Boolean
    previewH5p: Boolean
    subject: String
    visualElement: String
  ): String!
  updateFolder(
    description: String
    id: String!
    name: String
    status: String
  ): Folder!
  updateFolderResource(id: String!, tags: [String!]): FolderResource!
  updateFolderStatus(folderId: String!, status: String!): [String!]!
  updatePersonalData(
    favoriteSubjects: [String]
    shareName: Boolean
  ): MyNdlaPersonalData!
}

type MyNdlaGroup {
  displayName: String!
  id: String!
  isPrimarySchool: Boolean!
  parentId: String
}

type MyNdlaPersonalData {
  arenaEnabled: Boolean!
  displayName: String!
  favoriteSubjects: [String!]!
  feideId: String!
  groups: [MyNdlaGroup]!
  id: Int!
  organization: String!
  role: String!
  shareName: Boolean!
  username: String!
}

type Name {
  language: String!
  name: String!
}

type NewFolder {
  name: String!
  parentId: String
  status: String
}

type NewFolderResource {
  path: String!
  resourceType: String!
  tags: [String!]
}

type Owner {
  name: String!
}

type PodcastLicense {
  copyText: String
  copyright: Copyright!
  coverPhotoUrl: String
  description: String
  id: String!
  src: String!
  title: String!
}

type PodcastMeta {
  image: ImageMetaInformation
  introduction: String!
  language: String!
}

type PodcastSeries implements PodcastSeriesBase {
  coverPhoto: CoverPhoto!
  description: Description!
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

interface PodcastSeriesBase {
  coverPhoto: CoverPhoto!
  description: Description!
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

type PodcastSeriesSearch {
  language: String!
  page: Int
  pageSize: Int!
  results: [PodcastSeriesSummary!]!
  totalCount: Int!
}

type PodcastSeriesSummary {
  coverPhoto: CoverPhoto!
  description: Description!
  episodes: [AudioSummary!]
  id: Int!
  supportedLanguages: [String!]
  title: Title!
}

type PodcastSeriesWithEpisodes implements PodcastSeriesBase {
  content: ResourceEmbed
  coverPhoto: CoverPhoto!
  description: Description!
  episodes: [Audio!]
  hasRSS: Boolean!
  id: Int!
  image: ImageMetaInformation!
  supportedLanguages: [String!]!
  title: Title!
}

type ProgrammePage {
  contentUri: String
  desktopImage: MetaImage
  grades: [Grade!]
  id: String!
  metaDescription: String
  mobileImage: MetaImage
  title: Title!
  url: String!
}

type Query {
  aiEnabledOrgs: ConfigMetaStringList
  alerts: [UptimeAlert]
  allFolderResources(size: Int): [FolderResource!]!
  arenaCategories: [ArenaCategory!]!
  arenaCategory(categoryId: Int!, page: Int!): ArenaCategory
  arenaEnabledOrgs: ConfigMetaStringList
  arenaNotifications: [ArenaNotification!]!
  arenaRecentTopics: [ArenaTopic!]!
  arenaTopic(page: Int, topicId: Int!): ArenaTopic
  arenaTopicsByUser(userSlug: String!): [ArenaTopic!]!
  arenaUser(username: String!): ArenaUser
  article(
    absoluteUrl: Boolean
    convertEmbeds: Boolean
    draftConcept: Boolean
    id: String!
    isOembed: String
    path: String
    showVisualElement: String
    subjectId: String
  ): Article
  articleResource(articleId: String, taxonomyId: String): Resource
  audio(id: Int!): Audio
  competenceGoal(code: String!, language: String): CompetenceGoal
  competenceGoals(codes: [String], language: String): [CompetenceGoal!]
  concept(id: Int!): Concept
  conceptSearch(
    conceptType: String
    exactMatch: Boolean
    fallback: Boolean
    ids: [Int!]
    language: String
    page: Int
    pageSize: Int
    query: String
    subjects: String
    tags: String
  ): ConceptResult
  coreElement(code: String!, language: String): CoreElement
  coreElements(codes: [String], language: String): [CoreElement!]
  examLockStatus: ConfigMetaBoolean!
  filmfrontpage: FilmFrontpage
  folder(
    id: String!
    includeResources: Boolean
    includeSubfolders: Boolean
  ): Folder!
  folderResourceMeta(
    resource: FolderResourceMetaSearchInput!
  ): FolderResourceMeta
  folderResourceMetaSearch(
    resources: [FolderResourceMetaSearchInput!]!
  ): [FolderResourceMeta!]!
  folders(includeResources: Boolean, includeSubfolders: Boolean): [Folder!]!
  frontpage: FrontpageMenu
  frontpageSearch(query: String): FrontpageSearch
  groupSearch(
    aggregatePaths: [String!]
    contextTypes: String
    fallback: String
    filterInactive: Boolean
    grepCodes: String
    language: String
    levels: String
    page: Int
    pageSize: Int
    query: String
    resourceTypes: String
    subjects: String
  ): [GroupSearch!]
  image(id: String!): ImageMetaInformationV2
  learningpath(pathId: String!): Learningpath
  listingPage(subjects: String): ListingPage
  personalData: MyNdlaPersonalData
  podcastSearch(fallback: Boolean, page: Int!, pageSize: Int!): AudioSearch
  podcastSeries(id: Int!): PodcastSeriesWithEpisodes
  podcastSeriesSearch(
    fallback: Boolean
    page: Int!
    pageSize: Int!
  ): PodcastSeriesSearch
  programme(path: String): ProgrammePage
  programmes: [ProgrammePage!]
  resource(id: String!, subjectId: String, topicId: String): Resource
  resourceEmbed(id: String!, type: String!): ResourceEmbed!
  resourceEmbeds(resources: [ResourceEmbedInput!]!): ResourceEmbed!
  resourceTypes: [ResourceTypeDefinition!]
  search(
    aggregatePaths: [String!]
    contextFilters: String
    contextTypes: String
    fallback: String
    filterInactive: Boolean
    grepCodes: String
    ids: [Int!]
    language: String
    languageFilter: String
    levels: String
    page: Int
    pageSize: Int
    query: String
    relevance: String
    resourceTypes: String
    sort: String
    subjects: String
  ): Search
  searchWithoutPagination(
    contextFilters: String
    contextTypes: String
    fallback: String
    ids: [Int!]
    language: String
    languageFilter: String
    levels: String
    query: String
    relevance: String
    resourceTypes: String
    sort: String
    subjects: String
  ): SearchWithoutPagination
  sharedFolder(
    id: String!
    includeResources: Boolean
    includeSubfolders: Boolean
  ): SharedFolder!
  subject(id: String!): Subject
  subjectpage(id: Int!): SubjectPage
  subjects(
    filterVisible: Boolean
    metadataFilterKey: String
    metadataFilterValue: String
  ): [Subject!]
  topic(id: String!, subjectId: String): Topic
  topics(contentUri: String, filterVisible: Boolean): [Topic!]
}

type Reference {
  code: String
  id: String!
  title: String!
}

type RelatedContent {
  title: String!
  url: String!
}

type Resource implements TaxonomyEntity & WithArticle {
  article(convertEmbeds: Boolean, isOembed: String, subjectId: String): Article
  availability: String
  breadcrumbs: [String!]!
  contentUri: String
  contexts: [TaxonomyContext!]!
  id: String!
  language: String
  learningpath: Learningpath
  meta: Meta
  metadata: TaxonomyMetadata!
  name: String!
  parents: [Topic!]
  path: String!
  paths: [String!]!
  rank: Int
  relevanceId: String
  resourceTypes: [ResourceType!]
  supportedLanguages: [String!]!
  url: String
}

type ResourceEmbed {
  content: String!
  meta: ResourceMetaData!
}

input ResourceEmbedInput {
  conceptType: String
  id: String!
  type: String!
}

type ResourceMetaData {
  audios: [AudioLicense!]
  brightcoves: [BrightcoveLicense!]
  concepts: [ConceptLicense!]
  glosses: [GlossLicense!]
  h5ps: [H5pLicense!]
  images: [ImageLicense!]
  podcasts: [PodcastLicense!]
}

type ResourceType {
  id: String!
  name: String!
  resources(topicId: String!): [Resource!]
}

type ResourceTypeDefinition {
  id: String!
  name: String!
  subtypes: [ResourceTypeDefinition!]
}

type Search {
  aggregations: [AggregationResult!]!
  concepts: ConceptResult
  language: String!
  page: Int
  pageSize: Int!
  results: [SearchResult!]!
  suggestions: [SuggestionResult!]!
  totalCount: Int!
}

type SearchContext {
  breadcrumbs: [String!]!
  contextId: String!
  contextType: String!
  id: String!
  isActive: Boolean!
  isPrimary: Boolean!
  isVisible: Boolean!
  language: String!
  learningResourceType: String!
  parentIds: [String!]!
  path: String!
  publicId: String!
  relevance: String!
  relevanceId: String!
  resourceTypes: [SearchContextResourceTypes!]!
  root: String!
  rootId: String!
  subject: String!
  subjectId: String!
}

type SearchContextFilter {
  id: String!
  name: String!
  relevance: String!
}

type SearchContextResourceTypes {
  id: String!
  language: String!
  name: String!
}

interface SearchResult {
  contexts: [SearchContext!]!
  id: Int!
  metaDescription: String!
  metaImage: MetaImage
  supportedLanguages: [String!]!
  title: String!
  traits: [String!]!
  url: String!
}

type SearchSuggestion {
  length: Int!
  offset: Int!
  options: [SuggestOption!]!
  text: String!
}

type SearchWithoutPagination {
  results: [SearchResult!]!
}

type SharedFolder {
  breadcrumbs: [Breadcrumb!]!
  created: String!
  description: String
  id: String!
  name: String!
  owner: Owner
  parentId: String
  resources: [FolderResource!]!
  status: String!
  subfolders: [SharedFolder!]!
  updated: String!
}

type SortResult {
  parentId: String
  sortedIds: [String!]!
}

scalar StringRecord

type Subject implements TaxonomyEntity {
  allTopics: [Topic!]
  breadcrumbs: [String!]!
  contentUri: String
  contexts: [TaxonomyContext!]!
  grepCodes: [String!]
  id: String!
  language: String
  metadata: TaxonomyMetadata!
  name: String!
  path: String!
  paths: [String!]!
  relevanceId: String
  resourceTypes: [ResourceType!]
  subjectpage: SubjectPage
  supportedLanguages: [String!]!
  topics(all: Boolean): [Topic!]
  url: String
}

type SubjectLink {
  name: String
  path: String
}

type SubjectPage {
  about: SubjectPageAbout
  banner: SubjectPageBanner!
  buildsOn: [SubjectLink]!
  connectedTo: [SubjectLink]!
  id: Int!
  leadsTo: [SubjectLink]!
  metaDescription: String
  name: String!
  supportedLanguages: [String!]!
}

type SubjectPageAbout {
  description: String!
  title: String!
  visualElement: SubjectPageVisualElement!
}

type SubjectPageBanner {
  desktopId: String!
  desktopUrl: String!
  mobileId: String
  mobileUrl: String
}

type SubjectPageVisualElement {
  alt: String
  type: String!
  url: String!
}

type SuggestOption {
  score: Float!
  text: String!
}

type SuggestionResult {
  name: String!
  suggestions: [SearchSuggestion!]!
}

type Tags {
  language: String!
  tags: [String!]!
}

type TaxonomyContext {
  breadcrumbs: [String!]!
  parentIds: [String!]!
  path: String!
}

interface TaxonomyEntity {
  breadcrumbs: [String!]!
  contentUri: String
  contexts: [TaxonomyContext!]!
  id: String!
  language: String
  metadata: TaxonomyMetadata!
  name: String!
  path: String!
  paths: [String!]!
  relevanceId: String
  resourceTypes: [ResourceType!]
  supportedLanguages: [String!]!
  url: String
}

type TaxonomyMetadata {
  customFields: StringRecord!
  grepCodes: [String!]!
  visible: Boolean!
}

type Title {
  language: String!
  title: String!
}

type Topic implements TaxonomyEntity & WithArticle {
  alternateTopics: [Topic!]
  article(
    convertEmbeds: Boolean
    showVisualElement: String
    subjectId: String
  ): Article
  availability: String
  breadcrumbs: [String!]!
  contentUri: String
  contexts: [TaxonomyContext!]!
  coreResources(subjectId: String): [Resource!]
  id: String!
  isPrimary: Boolean
  language: String
  meta: Meta
  metadata: TaxonomyMetadata!
  name: String!
  parent: String
  parentId: String
  path: String!
  pathTopics: [[Topic!]!]
  paths: [String!]!
  relevanceId: String
  resourceTypes: [ResourceType!]
  subtopics: [Topic!]
  supplementaryResources(subjectId: String): [Resource!]
  supportedLanguages: [String!]!
  url: String
}

type Transcription {
  pinyin: String
  traditional: String
}

type UpdatedFolder {
  name: String
  status: String
}

type UpdatedFolderResource {
  tags: [String!]
}

type UptimeAlert {
  body: String
  closable: Boolean!
  number: Int!
  title: String!
}

type VideoFolderResourceMeta implements FolderResourceMeta {
  description: String!
  id: String!
  metaImage: MetaImage
  resourceTypes: [FolderResourceResourceType!]!
  title: String!
  type: String!
}

type VisualElement {
  brightcove: BrightcoveElement
  copyright: Copyright
  embed: String
  h5p: H5pElement
  image: ImageElement
  language: String
  oembed: VisualElementOembed
  resource: String
  title: String
  url: String
}

type VisualElementOembed {
  fullscreen: Boolean
  html: String
  title: String
}

interface WithArticle {
  availability: String
  meta: Meta
}
